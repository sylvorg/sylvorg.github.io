#+setupfile: ./settings/README.org

* CNAME
:PROPERTIES:
:ID:       b2bb02de-0ced-4df2-a6f5-2734845e163f
:CUSTOM_ID:       b2bb02de-0ced-4df2-a6f5-2734845e163f
:END:

#+begin_src text :tangle (meq/tangle-path)
syvl.org
#+end_src

* index.hy
:PROPERTIES:
:header-args:hy+: :noweb-ref 0d6044e9-0d98-4d89-adcc-955ad42f0fee
:ID:       697a3a77-89eb-4408-8cac-a5001e05daa2
:CUSTOM_ID:       697a3a77-89eb-4408-8cac-a5001e05daa2
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell" :exports none
<<0d6044e9-0d98-4d89-adcc-955ad42f0fee>>
#+end_src

#+begin_src hy
"
#! nix-shell -p python310 python310Packages.bakery yadm git gnumake fd emacs gnupg2 pinentry git-crypt
#! nix-shell -I nixpkgs=https://github.com/<<username>>/nixpkgs/archive/j.tar.gz
#! nix-shell -i hy
"
#+end_src

#+begin_src hy
(import sys [argv])
(del (get argv 0))

(import bakery)
(import bakery [echo gpg make nixos-generate-config yadm zfs])
(import click)
(import os [path] [chmod])
(import pathlib [Path])
(import stat)
(import socket)

(defn yes? [ var ] (in (.lower var) (, "y" "yes")))
(defn no? [ var ] (if (in (.lower var) (, "n" "no")) False var))
(defn repo-exists []
      (and (.exists Path (.join path home ".local" "share" "yadm" "repo.git"))
           (yes? (input "Repo already exists! Force clone?"))))
#+end_src

Adapted from [[https://stackoverflow.com/users/180464/eric-frederich][eric.frederich's]] comment [[https://stackoverflow.com/questions/12791997/how-do-you-do-a-simple-chmod-x-from-within-python#comment26692909_12792002][here]]:

#+begin_src hy
(defn chmod-bootstrap [ bootstrap ] (.chmod bootstrap (| (| (| (.stat bootstrap) (.S_IEXEC stat)) (.S_IXGRP stat)) (.S_IXOTH stat))))
#+end_src

#+begin_src hy
#@((.command click)
   (.option click "-b" "--bootstrap" :prompt True)
   (.option click "-i" "--impermanent" :prompt True)
   (.option click "-I" "--initialize-submodules" :prompt True)
   (.option click "-Y" "--import-yubikey" :prompt True)
   (.option click "-y" "--yadm-clone" :prompt True)
   (.option click "-z" "--zfs-root" :prompt True)
   (defn main [ impermanent import-yubikey yadm-clone secrets bootstrap zfs-root initialize-submodules ]
         (let [ home (.home Path)
                impermanent (yes? impermanent)
                worktree (if impermanent
                            f"/persist/{home}"
                            home)
                yadm-clone (yes? yadm-clone)
                zfs-root (yes? zfs-root)
                import-yubikey (yes? import-yubikey)
                initialize-submodules (yes? initialize-submodules)
                bootstrap (yes? bootstrap)
                clone-opts { "w" worktree "no-bootstrap" True }
                bootstrap-path (Path f"{home}/.config/yadm/bootstrap")
                bootstrap-bin (bakery :program- bootstrap-path)
                dataset f"{(.gethostname socket)}/<<username>>" ]
              (if import-yubikey
                  (do (gpg :fetch True)
                      (gpg :card-status True)
                      (| (echo (+ (.join "" (.split (get (gpg :fingerprint True "jeet.ray@syvl.org" :m/list True) 1))) ":6:")) (gpg :import-ownertrust))))
              (if yadm-clone
                  (do (.clone yadm :f (repo-exists) #** clone-opts "https://github.com/<<username>>/<<username>>.git")
                      (.remote yadm :m/starter-args (, "set-url") :push True "origin" "git@github.com:<<username>>/<<username>>.git")
                      (.crypt yadm unlock)))
              (nixos-generate-config :run True)
              (if initialize-submodules
                  (do (if impermanent
                          (.gitconfig yadm "core.worktree" worktree))
                      (.submodule (yadm :C worktree) :m/starter-args (, "update") :m/exports { "GIT_SSL_NO_VERIFY" 1 "GIT_DISCOVERY_ACROSS_FILESYSTEM" 1 } :init True :recursive True :remote True :force True)
                      (.gitconfig yadm "core.worktree" home)
                      (make :f f"{worktree}/.emacs.d/makefile" "soft-init")))
              (if bootstrap
                  (do (chmod-bootstrap bootstrap-path)
                      (bootstrap-bin worktree)))
              (if zfs-root
                  (do (.set zfs :snapdir "visible" dataset :m/run True)
                      (.inherit zfs :r True "snapdir" dataset :m/run True))))))
#+end_src

* index.html
:PROPERTIES:
:header-args:shell+: :noweb-ref index.html
:header-args:html+: :noweb-ref index.html
:ID:       f3e32608-7200-4808-9d42-59112f32d395
:CUSTOM_ID:       f3e32608-7200-4808-9d42-59112f32d395
:END:

Programs necessary for the bootstrap:

#+name: 58b62ef7-d880-4cc4-9d4d-9d0e76983d2f
#+begin_src text
yadm git "make gnumake" fd emacs
#+end_src

#+name: 4751ce0e-6018-4f00-8c6d-89f43c3fb792
#+begin_src emacs-lisp :eval never-export
(with-temp-buffer (insert-file-contents "./README.html") (buffer-string))
#+end_src

#+begin_src text :tangle (meq/tangle-path) :exports none
<<index.html>>
#+end_src

This was adapted from [[https://ellipsis.sh/][ellipsis.sh]], raw file [[https://raw.githubusercontent.com/ellipsis/ellipsis/gh-pages/index.html][here]]:

#+begin_src shell
<<\EOF
#+end_src

#+begin_src html
<<4751ce0e-6018-4f00-8c6d-89f43c3fb792()>><!--
#+end_src

For information on how to prompt when piping to ~sh~, see [[https://unix.stackexchange.com/users/48083/graeme][Graeme's]] answer [[https://unix.stackexchange.com/a/121255/270053][here]],
and [[https://stackoverflow.com/users/2092245/ferhtgoldaraz][ferhtgoldaraz's]] answer [[https://stackoverflow.com/a/15696250/10827766][here]].

#+begin_src shell
EOF
set -eo pipefail
bootstrap="$HOME/.local/share/syvl-bootstrap"
#+end_src

Adapted from [[https://unix.stackexchange.com/users/48083/graeme][Graeme's]] answer [[https://unix.stackexchange.com/a/121255/270053][here]],
and [[https://stackoverflow.com/users/2092245/ferhtgoldaraz][ferhtgoldaraz's]] answer [[https://stackoverflow.com/a/15696250/10827766][here]]:

#+begin_src shell
read -p $'Curl index script?\n' cis < /dev/tty
if [ "$cis" == "y" ] || [ "$cis" == "yes" ]; then
    curl -fsSLo $bootstrap https://raw.githubusercontent.com/sylvorg/sylvorg.github.io/main/index.hy
fi
#+end_src

#+begin_src shell
chmod +x $bootstrap
$bootstrap || echo "Sorry; something happened! Please try again!"
#+end_src

* makefile

#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := super-push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))

et:
|chmod +x $(mkfileDir)/settings/*.sh
|$(mkfileDir)/settings/org-export.sh $(mkfileDir)/README.org
|$(mkfileDir)/settings/org-tangle.sh $(mkfileDir)/README.org

commit:
|git -C $(mkfileDir) commit --allow-empty-message -am ""

push:
|git -C $(mkfileDir) push

cpush: commit push

super-push: et cpush
#+end_src